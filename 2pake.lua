io = require "io"
os = require "os"

Project = {}
function Project.new(name, kind, includeOther, linkOther)
  local t = {
    name = name,
    kind = kind,
    includeOther = includeOther,
    linkOther = linkOther
  }
  setmetatable(t, { __index = Project })
  return t
end

-- Os for makefile
local seperator = package.config:sub(1, 1)
System = seperator == "/" and "linux" or "windows"

-- Workspace name
io.write("Enter the name of your workspace: ")
Workspace = io.read()

-- Ask to use defaults
io.write("Include default configurations: [y]\n{ Debug, Release }\n{ Windows , Mac, Linux }\n")
Dbg, Rls, Win, Lnx, Mac = true, true, true, true, true

-- Config
if io.read() ~= "y" then
  io.write("Use debug? [y] ")
  Dbg = io.read() ~= "y" and false or true
  io.write("Use release? [y] ")
  Rls = io.read() ~= "y" and false or true

  io.write("Support windows? [y] ")
  Win = io.read() ~= "y" and false or true
  io.write("Support linux? [y] ")
  Lnx = io.read() ~= "y" and false or true
  io.write("Support mac? [y] ")
  Mac = io.read() ~= "y" and false or true
end

-- Language
while true do
  io.write("Language?\n[0] C\n[1] C++\n[2] D\n")
  local language = tonumber(io.read())

  if language == 0 then
    Language = "C"
    Extension = "c"
    Header = "h"
    break
  elseif language == 1 then
    Language = "C++"
    Extension = "cc"
    Header = "hh"
    break
  elseif language == 2 then
    Language = "D"
    Extension = "d"
    Header = "d"
    break
  else
    io.write("Unrecognized Option. Please try again.\n")
  end
end

-- Compiler
if Language == "C" or Language == "C++" then
  while true do
    io.write("Compiler?\n[0] gcc\n[1] clang\n[2] mingw\n")
    local compiler = tonumber(io.read())

    if compiler == 0 then
      Compiler = "gcc"
      break
    elseif compiler == 1 then
      Compiler = "clang"
      break
    elseif compiler == 2 then
      Compiler = "mingw"
      break
    else
      io.write("Unrecognized Option. Please try again.\n")
    end
  end
else
  while true do
    io.write("Compiler?\n[0] dmd\n[1] gdc\n[2] ldc")
    local compiler = tonumber(io.read())

    if compiler == 0 then
      Compiler = "dmd"
      break
    elseif compiler == 1 then
      Compiler = "gdc"
      break
    elseif compiler == 2 then
      Compiler = "ldc"
      break
    else
      io.write("Unrecognized Option. Please try again.\n")
    end
  end
end

-- Project Loop
Projects = {}

function Projects:add(value)
  table.insert(self, value)
end

local count = 0
while true do
  io.write("Add a new project? [y | n]\n")
  if io.read() ~= "y" then break end

  local name, kind, includeOther, linkOther

  io.write("Project name: ")
  name = io.read()

  while true do
    io.write("Kind?\n[0] Console app\n[1] Static library\n[2] Shared library\n[3] None\n")
    kind = tonumber(io.read())

    if kind == 0 then
      kind = "ConsoleApp"
      break
    elseif kind == 1 then
      kind = "StaticLib"
      break
    elseif kind == 2 then
      kind = "SharedLib"
      break
    elseif kind == 3 then
      kind = "None"
      break
    else
      io.write("Unrecognized Option. Please try again.\n")
    end
  end

  io.write("Include other projects? [y]")
  includeOther = io.read() ~= "y" and false or true

  io.write("Link other projects? [y]")
  linkOther = io.read() ~= "y" and false or true

  Projects:add(Project.new(name, kind, includeOther, linkOther))

  count = count + 1
end

if io.open("premake5.lua") then
  os.remove("premake5.lua")
  os.execute("mkdir src")
end

Script = io.open("premake5.lua", "a")
Script:write("-- Premake script generated by 2pake\n\n")
Script:write("workspace \"" .. Workspace .. "\"\n\n")

if Dbg then
  Script:write("configurations { \"debug\" }\n")
end

if Rls then
  Script:write("configurations { \"release\" }\n")
end

if Win then
  Script:write("platforms { \"windows\" }\n")
end

if Lnx then
  Script:write("platforms { \"linux\" }\n")
end

if Mac then
  Script:write("platforms { \"mac\" }\n\n")
end

if Dbg then
  Script:write("\tfilter { \"configurations:debug\" }\n")
  Script:write("\t\tdefines { \"DEBUG\" }\n")
  Script:write("\t\truntime \"Debug\"\n\n")
end

if Rls then
  Script:write("\tfilter { \"configurations:release\" }\n")
  Script:write("\t\tdefines { \"RELEASE\" }\n")
  Script:write("\t\truntime \"Release\"\n")
  Script:write("\t\toptimize \"On\"\n\n")
end

if Win then
  Script:write("\tfilter { \"platforms:windows\" }\n")
  Script:write("\t\tdefines { \"WINDOWS\" }\n")
  Script:write("\t\tsystem \"windows\"\n\n")
end

if Lnx then
  Script:write("\tfilter { \"platforms:linux\" }\n")
  Script:write("\t\tdefines { \"LINUX\" }\n")
  Script:write("\t\tsystem \"linux\"\n\n")
end

if Mac then
  Script:write("\tfilter { \"platforms:mac\" }\n")
  Script:write("\t\tdefines { \"MAC\" }\n")
  Script:write("\t\tsystem \"macosx\"\n\n")
end

if count == 1 then
  Script:write("project \"" .. Projects[1].name .. "\"\n")
  Script:write("\tlanguage \"" .. Language .. "\"\n")
  Script:write("\ttargetdir \"bin/%{cfg.buildcfg}\"\n")
  Script:write("\tkind \"" .. Projects[1].kind .. "\"\n")
  Script:write("\tfiles { \"src/**." .. Extension .. "\", \"src/**." .. Header .. "\"}")
end

io.write("\n")
